datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // tg id
  userId String @unique

  wallets            Wallet[]
  pendingGroupMember PendingGroupMember[]
  GroupAdmin         GroupAdmin[]
  GroupMember        GroupMember[]

  @@index([userId])
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address String @unique

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@index([address])
  @@unique([accountId, address])
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String  @default("") @db.VarChar(256)
  active  Boolean @default(false)
  // tg id
  groupId String  @unique

  // creator   Account @relation(fields: [creatorId], references: [id])
  // creatorId String

  groupMembers        GroupMember[]
  manageGroupCodes    ManageGroupCode[]
  pendingGroupMembers PendingGroupMember[]
  groupTokenGate      GroupTokenGate[]
  groupAdmins         GroupAdmin[]

  @@index([groupId])
}

model GroupTokenGate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String  @default("") @db.VarChar(128)
  active          Boolean @default(true)
  contractAddress String
  minTokens       Int?
  maxTokens       Int?

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@index([groupId])
}

model ManageGroupCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String
  expiresAt DateTime

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@unique([groupId, code])
  @@index([code])
}

model GroupAdmin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([groupId, accountId])
}

// anyone who has gone through the auth flow and needs to be token gate checked
model GroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(false)

  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  groupMemberInviteLink GroupMemberInviteLink[]

  @@unique([accountId, groupId], name: "GroupMember_accountId_groupId_unique")
  @@index([groupId])
}

model PendingGroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String   @unique
  expiresAt DateTime
  consumed  Boolean  @default(false)

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String

  @@index([accountId])
  @@index([groupId])
  @@index([code])
}

model GroupMemberInviteLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id])
  groupMemberId String

  inviteLink String @unique
  expiresAt  DateTime
  consumedAt DateTime?

  @@index([groupMemberId, createdAt(sort: Desc)])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updateId   String?
  updateDate DateTime

  // tg id
  groupId String?

  auditType AuditTypes

  data Json
}

enum AuditTypes {
  MY_CHAT_MEMBER
  CHAT_MEMBER
  VERIFY_ATTEMPT
}
