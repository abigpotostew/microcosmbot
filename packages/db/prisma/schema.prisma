datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // tg id
  userId BigInt @unique

  wallets            Wallet[]
  pendingGroupMember PendingGroupMember[]

  @@index([userId])
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address String @unique

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  groupMembers GroupMember[]

  @@index([accountId])
  @@index([address])
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  active Boolean @default(false)

  // tg id
  groupId BigInt @unique

  // creator   Account @relation(fields: [creatorId], references: [id])
  // creatorId String

  groupMembers        GroupMember[]
  manageGroupCodes    ManageGroupCode[]
  pendingGroupMembers PendingGroupMember[]

  @@index([groupId])
}

model ManageGroupCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String
  expiresAt DateTime

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@unique([groupId, code])
}

model GroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group   @relation(fields: [groupId], references: [id])
  groupId String
  active  Boolean @default(false)

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  groupMemberInviteLink GroupMemberInviteLink[]

  @@unique([walletId, groupId], name: "GroupMember_walletId_groupId_unique")
  // @@index([walletId])
  @@index([groupId])
}

model PendingGroupMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String   @unique
  expiresAt DateTime
  consumed  Boolean  @default(false)

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String

  @@index([accountId])
  @@index([groupId])
  @@index([code])
}

model GroupMemberInviteLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id])
  groupMemberId String

  inviteLink String
  expiresAt  DateTime

  @@index([groupMemberId, createdAt(sort: Desc)])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  updateId   BigInt
  updateDate DateTime

  // tg id
  groupId BigInt

  auditType AuditTypes

  data Json
}

enum AuditTypes {
  MY_CHAT_MEMBER
  CHAT_MEMBER
}
