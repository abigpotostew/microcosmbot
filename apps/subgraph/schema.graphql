type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StreamCreated @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  streamType: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpgradeRegistered @entity(immutable: true) {
  id: Bytes!
  baseImpl: Bytes! # address
  upgradeImpl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpgradeRemoved @entity(immutable: true) {
  id: Bytes!
  baseImpl: Bytes! # address
  upgradeImpl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type FundsDisbursed @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  amount: BigInt! # uint256
  streamType: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IntervalsInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IntervalsOwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IntervalsOwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IntervalsOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IntervalsStreamCreated @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  streamType: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StreamPaused @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  paused: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type MilestonesFundsDisbursed @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  amount: BigInt! # uint256
  streamType: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesOwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesOwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesPaused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesStreamCreated @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  streamType: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesStreamPaused @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  paused: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesUnpaused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MilestonesWithdraw @entity(immutable: true) {
  id: Bytes!
  streamId: Bytes! # address
  amount: BigInt! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stream @entity {
  id: Bytes!
  address: String! # address
  controller: String! # address
  recipient: String! # address
  type: String! # string
  paused: Boolean!
  balance: BigInt!
  token: Bytes!
  botDAO: Bytes!
  nextPayment: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  data: String
}

type _Schema_
  @fulltext(
    name: "streamSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Stream"
        fields: [
          { name: "controller" }
          { name: "recipient" }
          { name: "address" }
          { name: "type" }
        ]
      }
    ]
  )

type Activity @entity(immutable: true) {
  id: Bytes!
  event: String!
  message: String! # address
  type: String! # string
  address: Bytes # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
